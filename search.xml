<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo添加评论系统livere</title>
    <url>/2024/03/18/Hexo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9Flivere/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>CSS选择器优先级如何确定？</title>
    <url>/2024/03/17/Font-end/2024/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%BC%98%E5%85%88%E7%BA%A7%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="属性赋值，层叠（Cascading）和继承"><a href="#属性赋值，层叠（Cascading）和继承" class="headerlink" title="属性赋值，层叠（Cascading）和继承"></a>属性赋值，层叠（Cascading）和继承</h1><h2 id="1、指定值，计算值和实际值"><a href="#1、指定值，计算值和实际值" class="headerlink" title="1、指定值，计算值和实际值"></a>1、指定值，计算值和实际值</h2><p>一旦用户代理已经解析了文档并构造好了文档树，它就必须给树中的每个元素上适用于目标媒体类型的每个属性赋值</p>
<p>属性的最终值是4步计算的结果：先通过指定来确定值（“指定值（specified value）”），接着处理得到一个用于继承的值（“计算值（computed value）”），然后如果有必要的话转化为一个绝对值（“应用值（used value）”），最后根据本地环境限制进行转换（“实际值（actual value）”）</p>
<h3 id="1-1-指定值"><a href="#1-1-指定值" class="headerlink" title="1.1 指定值"></a>1.1 指定值</h3><p>用户代理必须先根据下列机制（按优先顺序）给每个属性赋值一个指定值：</p>
<h4 id="1-1-1-如果层叠产生了一个值，就使用它"><a href="#1-1-1-如果层叠产生了一个值，就使用它" class="headerlink" title="1.1.1 如果层叠产生了一个值，就使用它"></a>1.1.1 如果层叠产生了一个值，就使用它</h4><h4 id="1-1-2-否则，如果属性是继承的并且该元素不是文档树的根元素，使用其父元素的计算值"><a href="#1-1-2-否则，如果属性是继承的并且该元素不是文档树的根元素，使用其父元素的计算值" class="headerlink" title="1.1.2 否则，如果属性是继承的并且该元素不是文档树的根元素，使用其父元素的计算值"></a>1.1.2 否则，如果属性是继承的并且该元素不是文档树的根元素，使用其父元素的计算值</h4><h4 id="1-1-3-否则使用属性的初始值，每个属性的初始值都在属性定义中指出了"><a href="#1-1-3-否则使用属性的初始值，每个属性的初始值都在属性定义中指出了" class="headerlink" title="1.1.3 否则使用属性的初始值，每个属性的初始值都在属性定义中指出了"></a>1.1.3 否则使用属性的初始值，每个属性的初始值都在属性定义中指出了</h4><h3 id="1-2-计算值"><a href="#1-2-计算值" class="headerlink" title="1.2 计算值"></a>1.2 计算值</h3><p>指定值通过层叠被处理为计算值，例如，URI被转换成绝对的，’em’和’ex’单位被计算为像素或者绝对长度。计算一个值并不需要用户代理渲染文档</p>
<p>UA无法处理为绝对URI的话，该URI的计算值就是指定值</p>
<p>一个属性的计算值由属性定义中Computed Value行决定。当指定值为’inherit’时，计算值的定义见继承小节</p>
<p>即使属性不适用（于当前元素），其计算值也存在，定义在’Applies To’行。然而，有些属性可能根据属性是否适用于该元素来定义元素属性的计算值</p>
<h3 id="1-3-应用值"><a href="#1-3-应用值" class="headerlink" title="1.3 应用值"></a>1.3 应用值</h3><p>处理计算值时，尽可能不要格式化文档。然而，有些值只能在文档布局完成时确定。例如，如果一个元素的宽度是其包含块的特定百分比，在包含块的宽度确定之前无法确定这个宽度。应用值是把计算值剩余的依赖（值）都处理成绝对值后的（计算）结果</p>
<h3 id="1-4-实际值"><a href="#1-4-实际值" class="headerlink" title="1.4 实际值"></a>1.4 实际值</h3><p>原则上，应用值应该用于渲染，但用户代理可能无法在给定的环境中利用该值。例如，用户代理或许只能用整数像素宽度渲染边框，因此不得不对宽度的计算值做近似处理，或者用户代理可能被迫只能用黑白色调而不是全彩色。实际值是经过近似处理后的应用值</p>
<h2 id="2、继承"><a href="#2、继承" class="headerlink" title="2、继承"></a>2、继承</h2><p>有些值是从文档树中某个元素的子级继承来的，就像上面描述的一样。每个属性都定义了它是否可继承</p>
<p>假设H1元素里有个强调元素(EM)：<br><code>&lt;H1&gt;The headline &lt;EM&gt;is&lt;/EM&gt; important!&lt;/H1&gt;</code></p>
<p>如果没有给EM元素赋值颜色，强调的”is”将从其父元素继承颜色，所以如果H1是蓝色的，EM元素同样也将是蓝色的</p>
<p>发生继承时，元素继承计算值。来自父元素的计算值同时作为指定值和其子级的计算值</p>
<p>例如，给出如下样式表：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">font-size</span>: <span class="number">10pt</span> &#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">font-size</span>: <span class="number">130%</span> &#125;</span><br></pre></td></tr></table></figure>
<p>和文档片段：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">BODY</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">H1</span>&gt;</span>A <span class="tag">&lt;<span class="name">EM</span>&gt;</span>large<span class="tag">&lt;/<span class="name">EM</span>&gt;</span> heading<span class="tag">&lt;/<span class="name">H1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">BODY</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>H1元素的’font-size’属性将获得计算值’13pt’（130%乘以父元素的值10pt）。因为’font-size’的计算值是继承的，EM元素也将获得计算值’13pt’。如果用户代理没有可用的13pt字体，H1和EM的’font-size’的实际值可能是，例如，’12pt’</p>
<p>注意，继承遵循文档树并且不会被匿名框截断</p>
<h3 id="2-1-‘inherit’值"><a href="#2-1-‘inherit’值" class="headerlink" title="2.1 ‘inherit’值"></a>2.1 ‘inherit’值</h3><p>每个属性也可能有一个’inherit’层叠值，表示对于一个给定的元素，属性采用与其父级属性相同的指定值。’inherit’值可以用来实现值的继承，并且它也可以用在那些一般不是继承的属性上</p>
<p>如果’inherit’值设置在根元素上，该属性会被赋值为其初始值</p>
<p>下例中，’color’和’background’属性被设置在BODY元素上。对于其它所有元素，’color’值都将被继承并且背景将是透明的。如果这些规则是用户样式表的一部分，整个文档都将是白色背景上的黑色文本</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black <span class="meta">!important</span>; </span><br><span class="line">  <span class="attribute">background</span>: white <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* &#123; </span><br><span class="line">  <span class="attribute">color</span>: inherit <span class="meta">!important</span>; </span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、-import规则"><a href="#3、-import规则" class="headerlink" title="3、@import规则"></a>3、@import规则</h2><p>‘@import’规则允许用户从其它样式表引入样式规则。CSS 2.1中，任何@import规则必须位于所有其它规则（除了@charset，如果有的话）之前。关于用户代理什么情况下必须忽略@import规则，见解析章节。‘@import’关键字后面必须跟着想要引入的样式表的URI。字符串也可以接受，也可以表示成周围有url(…)的形式</p>
<p>下面这几行在意义上是等价的，都描述了‘@import’语法（一个有”url()”，另一个是裸字符串）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@import &quot;mystyle.css&quot;;</span><br><span class="line">@import url(&quot;mystyle.css&quot;);</span><br></pre></td></tr></table></figure>
<p>为了让用户代理能够避免为不支持的媒体类型检索资源，编写者可以指定带媒体依赖（media-dependent）的@import规则。这种条件引入在URI后面指定了逗号分隔的媒体类型</p>
<p>下列规则描述了@import规则怎样变成带媒体依赖的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@import url(&quot;fineprint.css&quot;) print;</span><br><span class="line">@import url(&quot;bluish.css&quot;) projection, tv;</span><br></pre></td></tr></table></figure>
<p>缺少媒体类型时，引入是无条件的，与把媒体指定为’all’效果一样。引入只在目标媒体匹配媒体列表时才生效</p>
<p>如果媒体列表中有一项是目标媒体或者’all’时，目标媒体匹配媒体列表</p>
<p>注意，媒体查询[MEDIAQ]扩展了媒体列表的语法和匹配的定义</p>
<p>引入相同样式表或者在多处链接同一文档时，用户代理必须处理（或者表现得像那样）每一个链接，就像链接都指向一个单独的样式表一样</p>
<h2 id="4、层叠（cascade）"><a href="#4、层叠（cascade）" class="headerlink" title="4、层叠（cascade）"></a>4、层叠（cascade）</h2><p>样式表可能有3种不同来源：编写者，用户和用户代理</p>
<ul>
<li><strong>编写者</strong>：编写者根据文档语言约定给源文档指定样式表。例如，HTML中，样式表可以包含在文档中或者从外部链接</li>
<li><strong>用户</strong>：用户可能会给某个特定文档指定样式信息。例如，用户可以指定一个含有样式表的文件，或者用户代理可能会提供一个用来生成用户样式表（或者表现得像这样做了一样）的界面</li>
<li><strong>用户代理</strong>: （与CSS规范）一致的用户代理必须应用一份默认样式表（或者表现得像它做了一样）。用户代理的默认样式表应该以满足文档语言一般表现预期的方式来呈现文档语言元素（例如，对于可视化浏览器，HTML中EM元素用斜体来表示）。关于HTML元素的推荐默认样式表，见一份简单的HTML样式表<br>注意，用户可能会修改系统设置（例如，系统配色），这会影响默认样式表。然而，有些用户代理实现让默认样式表中的值不可改变</li>
</ul>
<p>这3种样式表将在一定范围内重叠，并且它们按照层叠互相影响</p>
<p>CSS层叠给每个样式规则赋予了权重。应用几条规则时，权重最大的优先</p>
<p>默认情况下，编写者样式表中的规则比用户样式表中的规则权重高。然而，对于”!important”规则，优先级却是相反的。所有用户和编写者规则都比UA默认样式表中的规则权重高</p>
<h3 id="4-1-层叠顺序"><a href="#4-1-层叠顺序" class="headerlink" title="4.1 层叠顺序"></a>4.1 层叠顺序</h3><p>为了找出一个元素&#x2F;属性组合的值，用户代理必须按照下列（步骤）排序：</p>
<ol>
<li>找出目标媒体类型下，所有适用于该元素和目标属性的声明。如果关联的选择器匹配该元素，并且目标媒体类型与含有该声明的@media规则列出的所有媒体类型，以及到达样式表的路径上所有链接匹配，则声明适用（Declarations apply if the associated selector matches the element in question and the target medium matches the media list on all @media rules containing the declaration and on all links on the path through which the style sheet was reached.）</li>
<li>根据重要性（常规或重要）和来源（编写者，用户或用户代理）排序，升序优先级为：<ul>
<li>用户代理声明</li>
<li>用户常规声明</li>
<li>编写者常规声明</li>
<li>编写者重要声明</li>
<li>用户重要声明</li>
</ul>
<p>	</p>
</li>
<li>相同重要性和来源的规则根据选择器的特殊性（specificity）排序：更特殊的选择器将重写一般的。伪元素和伪类被分别算作常规元素和类</li>
<li>最后，根据指定顺序排序：如果两个声明的权重，来源和特殊性都相同，后指定的生效。引入的样式表（译注：这里应该是指‘@import’，而不是广义的通过各种方式引入样式表）中的声明被认为在样式表自身的所有声明之前</li>
</ol>
<p>除了给个别声明设置”!important”外，比起读者样式表，这种策略给了编写者样式表更高的权重。用户代理必须给予用户去除特定编写者样式表影响的能力，例如，通过一个下拉菜单。与UAAG 1.0 checkpoint 4.14一致的（用户代理）满足该条件[UAAG10]</p>
<h3 id="4-2-important规则"><a href="#4-2-important规则" class="headerlink" title="4.2 !important规则"></a>4.2 !important规则</h3><p>CSS尝试在编写者和用户样式表之间建立平衡。默认情况下，编写者样式表中的规则会重写那些位于用户样式表中的（见层叠规则3）</p>
<p>然而，为了平衡，”!important”声明（声明后面跟着分隔符token “!”和关键字”important”）比常规声明优先。编写者和用户样式表都可能含有”!important”声明，并且用户”!important”规则会重写编写者”!important”规则。通过给予用户表现上的特殊需求（大字体，颜色组合等等）控制，该CSS特性提高了文档的可访问性</p>
<p>声明一个简写属性（例如，’background’）为”!important”等价于声明其所有子属性为”!important”</p>
<p>下例中用户样式表的第一条规则含有一个”!important”声明，重写了编写者样式表中的相关声明。第二条声明也将生效，因为被标记为”!important”了。然而，用户样式表中的第三条规则不是”!important”，因此被编写者样式表（恰好在一条简写属性中设置了）中的第二条规则重写了。而且，第三条编写者规则将被第二条编写者规则重写，因为第二条规则是”!important”。这说明”!important”声明在编写者样式表中也有效</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* From the user&#x27;s style sheet */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">text-indent</span>: <span class="number">1em</span> ! important &#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">font-style</span>: italic ! important &#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">font-size</span>: <span class="number">18pt</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* From the author&#x27;s style sheet */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">text-indent</span>: <span class="number">1.5em</span> <span class="meta">!important</span> &#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">font</span>: normal <span class="number">12pt</span> sans-serif <span class="meta">!important</span> &#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">font-size</span>: <span class="number">24pt</span> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-计算选择器的特殊性（specificity）"><a href="#4-3-计算选择器的特殊性（specificity）" class="headerlink" title="4.3 计算选择器的特殊性（specificity）"></a>4.3 计算选择器的特殊性（specificity）</h3><p>一个选择器的特殊性是根据下列（规则）计算的：</p>
<ul>
<li>如果声明来自一个’style’属性而不是一条选择器样式规则，算1，否则就是0 (&#x3D; a)（HTMl中，一个元素的”style”属性值是样式表规则，这些属性没有选择器，所以a&#x3D;1，b&#x3D;0，c&#x3D;0，d&#x3D;0）</li>
<li>计算选择器中ID属性的数量 (&#x3D; b)</li>
<li>计算选择器中其它属性和伪类的数量 (&#x3D; c)</li>
<li>计算选择器中元素名和伪元素的数量 (&#x3D; d)</li>
</ul>
<p>特殊性只根据选择器的形式来定。特殊的，一个”[id&#x3D;p33]”形式的选择器被算作一个属性选择器(a&#x3D;0, b&#x3D;0, c&#x3D;1, d&#x3D;0)，即使id属性在源文档的DTD中被定义为”ID”</p>
<p>4个数连起来a-b-c-d（在一个基数很大的数字系统中（in a number system with a large base））表示特殊性</p>
<p>一些示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> *             &#123;&#125;  /* a=0 b=0 c=0 d=0 -&gt; specificity = 0,0,0,0 */</span><br><span class="line"> li            &#123;&#125;  /* a=0 b=0 c=0 d=1 -&gt; specificity = 0,0,0,1 */</span><br><span class="line"> li:first-line &#123;&#125;  /* a=0 b=0 c=0 d=2 -&gt; specificity = 0,0,0,2 */</span><br><span class="line"> ul li         &#123;&#125;  /* a=0 b=0 c=0 d=2 -&gt; specificity = 0,0,0,2 */</span><br><span class="line"> ul ol+li      &#123;&#125;  /* a=0 b=0 c=0 d=3 -&gt; specificity = 0,0,0,3 */</span><br><span class="line"> h1 + *[rel=up]&#123;&#125;  /* a=0 b=0 c=1 d=1 -&gt; specificity = 0,0,1,1 */</span><br><span class="line"> ul ol li.red  &#123;&#125;  /* a=0 b=0 c=1 d=3 -&gt; specificity = 0,0,1,3 */</span><br><span class="line"> li.red.level  &#123;&#125;  /* a=0 b=0 c=2 d=1 -&gt; specificity = 0,0,2,1 */</span><br><span class="line"> #x34y         &#123;&#125;  /* a=0 b=1 c=0 d=0 -&gt; specificity = 0,1,0,0 */</span><br><span class="line"> style=&quot;&quot;          /* a=1 b=0 c=0 d=0 -&gt; specificity = 1,0,0,0 */</span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">HEAD</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">STYLE</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#x97z</span> &#123; <span class="attribute">color</span>: red &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HEAD</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">BODY</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span> <span class="attr">ID</span>=<span class="string">x97z</span> <span class="attr">style</span>=<span class="string">&quot;color: green&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">BODY</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面的示例中，P元素的颜色将是绿色，”style”属性中的声明将重写STYLE元素中的，因为层叠规则3，它的特殊性更高</p>
<h3 id="4-4-非CSS表现型提示（presentational-hints）的样式优先级"><a href="#4-4-非CSS表现型提示（presentational-hints）的样式优先级" class="headerlink" title="4.4 非CSS表现型提示（presentational hints）的样式优先级"></a>4.4 非CSS表现型提示（presentational hints）的样式优先级</h3><p>UA可能选择尊重HTML源文档中的表现型属性。如果这样的话，这些属性会被翻译成相应的特殊性为0的CSS规则，并且就当它们像是被插在编写者样式表开头的一样。因此，它们可以被后续样式表符规则重写。在过渡阶段，这种策略让表现型属性（stylistic attributes）更容易与样式表共存</p>
<p>对于HTML，下面列表之外的任何属性都应该被认为是表现性的：abbr，accept-charset，accept，accesskey， action，alt，archive，axis，charset，checked，cite，class，classid， code，codebase，codetype，colspan，coords，data，datetime，declare， defer，dir，disabled，enctype，for，headers，href，hreflang， http-equiv，id，ismap，label，lang，language，longdesc，maxlength， media，method，multiple，name，nohref，object，onblur，onchange， onclick，ondblclick，onfocus，onkeydown，onkeypress，onkeyup，onload， onload，onmousedown，onmousemove，onmouseout，onmouseover，onmouseup， onreset，onselect，onsubmit，onunload，onunload，profile，prompt， readonly，rel，rev，rowspan，scheme，scope，selected，shape，span， src，standby，start，style，summary，title，type（LI，OL和UL元素上的除外），usemap，value，valuetype，version</p>
<p>对于其它语言，所有基于文档语言的样式必须被翻译成相应的CSS，并且要么算进用户代理级的层叠中，要么与HTML表现型提示一起被当作特殊性为0的编写者级规则放在编写者样式表开头</p>
<p>下列用户样式表将会重写所有文档中’b’元素的字重，以及XML文档中具有color属性的font’元素的颜色。它将不会影响HTML文档中任何具有color属性的’font’元素的颜色（译注：实际上，在HTML里这个样式对有color属性的font元素也是有效的。但一致性章节有声明“示例和注意事项是非规范的”，这里是示例）：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">b</span> &#123; <span class="attribute">font-weight</span>: normal; &#125;</span><br><span class="line"><span class="attribute">font</span><span class="selector-attr">[color]</span> &#123; <span class="attribute">color</span>: orange; &#125;</span><br></pre></td></tr></table></figure>
<p>然而，下面的（样式表）将会重写所有文档中font元素的颜色：</p>
<p><code>font[color] &#123; color: orange ! important; &#125;</code></p>
<h2 id="5、小结"><a href="#5、小结" class="headerlink" title="5、小结"></a>5、小结</h2><h3 id="5-1-选择器越具体，其优先级越高"><a href="#5-1-选择器越具体，其优先级越高" class="headerlink" title="5.1 选择器越具体，其优先级越高"></a>5.1 选择器越具体，其优先级越高</h3><h3 id="5-2-相同优先级，出现在后面的，覆盖前面的"><a href="#5-2-相同优先级，出现在后面的，覆盖前面的" class="headerlink" title="5.2 相同优先级，出现在后面的，覆盖前面的"></a>5.2 相同优先级，出现在后面的，覆盖前面的</h3><h3 id="5-3-属性后面加-important-的优先级最高，但是要少用"><a href="#5-3-属性后面加-important-的优先级最高，但是要少用" class="headerlink" title="5.3 属性后面加 !important 的优先级最高，但是要少用"></a>5.3 属性后面加 !important 的优先级最高，但是要少用</h3><hr>
]]></content>
      <categories>
        <category>Front-end</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>front-end</tag>
      </tags>
  </entry>
  <entry>
    <title>JS的new做了什么？</title>
    <url>/2024/03/16/Font-end/2024/JS%E7%9A%84new%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="new-做了什么"><a href="#new-做了什么" class="headerlink" title="new 做了什么"></a>new 做了什么</h1><p>1、创建临时对象&#x2F;新对象<br>2、绑定原型<br>3、指定 this &#x3D; 临时对象<br>4、执行构造函数<br>5、返回临时对象</p>
<p>想象我们在制作一个足球游戏，玩家可以创造球员。</p>
<p>我们着重来研究一下这个游戏里面的「制造球员」环节。</p>
<p>一个球员的在计算机里就是一堆属性<br><code>位置、弹跳、速度、 生命值 奔跑(动作)、传球(动作)、突破(动作)、铲球(动作)、射门(动作)</code></p>
<h1 id="我们只需要这样就可以制造一个球员："><a href="#我们只需要这样就可以制造一个球员：" class="headerlink" title="我们只需要这样就可以制造一个球员："></a>我们只需要这样就可以制造一个球员：</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 球员 = &#123;</span><br><span class="line">  <span class="attr">ID</span>: <span class="number">1</span>, <span class="comment">// 用于区分每个球员</span></span><br><span class="line">  生命值：<span class="number">52</span>，</span><br><span class="line">  位置:<span class="string">&quot;前锋&quot;</span>,</span><br><span class="line">  弹跳:<span class="number">60</span>,</span><br><span class="line">  速度:<span class="number">82</span>, </span><br><span class="line">  奔跑:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*狂奔的代码*/</span>  &#125;,</span><br><span class="line">  传球:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*传球的代码*/</span>  &#125;,</span><br><span class="line">  突破:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*突破的代码*/</span>  &#125;,</span><br><span class="line">  铲球:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*铲球的代码*/</span>  &#125;,</span><br><span class="line">  射门:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*射门的代码*/</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>俱乐部.制造(球员)<br>制造二十个球员</p>
<h1 id="如果需要制造-100-个球员怎么办呢？"><a href="#如果需要制造-100-个球员怎么办呢？" class="headerlink" title="如果需要制造 100 个球员怎么办呢？"></a>如果需要制造 100 个球员怎么办呢？</h1><p>循环 100 次吧：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 球员们 = []</span><br><span class="line"><span class="keyword">var</span> 球员</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</span><br><span class="line">	球员 = &#123;</span><br><span class="line">	  <span class="attr">ID</span>: i, <span class="comment">//  ID 不能重复</span></span><br><span class="line">	  生命值：<span class="number">52</span>，</span><br><span class="line">	  位置:<span class="string">&quot;前锋&quot;</span>,</span><br><span class="line">	  弹跳:<span class="number">60</span>,</span><br><span class="line">	  速度:<span class="number">82</span>, </span><br><span class="line">	  奔跑:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*狂奔的代码*/</span>  &#125;,</span><br><span class="line">	  传球:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*传球的代码*/</span>  &#125;,</span><br><span class="line">	  突破:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*突破的代码*/</span>  &#125;,</span><br><span class="line">	  铲球:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*铲球的代码*/</span>  &#125;,</span><br><span class="line">	  射门:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*射门的代码*/</span> &#125;</span><br><span class="line">	&#125;</span><br><span class="line">  球员们.<span class="title function_">push</span>(球员)</span><br><span class="line">&#125;</span><br><span class="line">俱乐部.批量制造(球员们)</span><br></pre></td></tr></table></figure>
<h1 id="质疑"><a href="#质疑" class="headerlink" title="质疑"></a>质疑</h1><p>上面的代码存在一个问题：浪费了很多内存。</p>
<p>奔跑、传球、突破、铲球、射门这五个动作对于每个球员其实是一样的，只需要各自引用同一个函数就可以了，没必要重复创建 100 个行走、100个奔跑……<br>只有 ID、生命值、弹跳、速度、位置需要创建 100 次，因为每个球员有自己的  ID、生命值、弹跳、速度、位置。</p>
<h1 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h1><p>用原型链可以解决重复创建的问题：我们先创建一个「球员原型」，然后让「球员」的 <strong>proto</strong> 指向「球员原型」</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 球员原型 = &#123;</span><br><span class="line">	  奔跑:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*狂奔的代码*/</span>  &#125;,</span><br><span class="line">	  传球:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*传球的代码*/</span>  &#125;,</span><br><span class="line">	  突破:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*突破的代码*/</span>  &#125;,</span><br><span class="line">	  铲球:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*铲球的代码*/</span>  &#125;,</span><br><span class="line">	  射门:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*射门的代码*/</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> 球员们 = []</span><br><span class="line"><span class="keyword">var</span> 球员</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</span><br><span class="line">  球员 = &#123;</span><br><span class="line">      <span class="attr">ID</span>: i, <span class="comment">//  ID 不能重复</span></span><br><span class="line">	  生命值：<span class="number">52</span>，</span><br><span class="line">	  位置:<span class="string">&quot;前锋&quot;</span>,</span><br><span class="line">	  弹跳:<span class="number">60</span>,</span><br><span class="line">	  速度:<span class="number">82</span>, </span><br><span class="line">  &#125;</span><br><span class="line">  球员.<span class="property">__proto__</span> = 球员原型 </span><br><span class="line">  球员们.<span class="title function_">push</span>(球员)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">俱乐部.批量制造(球员们)</span><br></pre></td></tr></table></figure>

<h1 id="优雅？"><a href="#优雅？" class="headerlink" title="优雅？"></a>优雅？</h1><p>有人指出创建一个球员的代码分散在两个地方很不优雅，于是我们用一个函数把这两部分联系起来：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 球员(<span class="variable constant_">ID</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> 临时对象 = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  临时对象.<span class="property">__proto__</span> = 球员.原型</span><br><span class="line"></span><br><span class="line">  临时对象.<span class="property">ID</span> = <span class="variable constant_">ID</span></span><br><span class="line">  临时对象.生命值 = <span class="number">42</span></span><br><span class="line">  临时对象.位置 = <span class="string">&#x27;前锋&#x27;</span></span><br><span class="line">  临时对象.弹跳 = <span class="number">60</span></span><br><span class="line">  临时对象.速度 = <span class="number">90</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> 临时对象</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">球员.原型 = &#123;</span><br><span class="line">	奔跑:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*狂奔的代码*/</span>  &#125;,</span><br><span class="line">	传球:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*传球的代码*/</span>  &#125;,</span><br><span class="line">	突破:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*突破的代码*/</span>  &#125;,</span><br><span class="line">	铲球:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*铲球的代码*/</span>  &#125;,</span><br><span class="line">	射门:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*射门的代码*/</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后就可以愉快地引用「球员」来创建球员了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 球员们 = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</span><br><span class="line">  球员们.<span class="title function_">push</span>(球员(i))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">俱乐部.批量制造(球员们)</span><br></pre></td></tr></table></figure>

<h1 id="用-new-关键字，可以让我们少写几行代码："><a href="#用-new-关键字，可以让我们少写几行代码：" class="headerlink" title="用 new 关键字，可以让我们少写几行代码："></a>用 new 关键字，可以让我们少写几行代码：</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 球员(<span class="variable constant_">ID</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> 临时对象 = &#123;&#125;  <span class="comment">// 1、我帮你创建临时对象</span></span><br><span class="line"></span><br><span class="line">  临时对象.<span class="property">__proto__</span> = 球员.原型  <span class="comment">// 2、我帮你绑定原型</span></span><br><span class="line"></span><br><span class="line">  临时对象.<span class="property">ID</span> = <span class="variable constant_">ID</span></span><br><span class="line">  临时对象.生命值 = <span class="number">42</span></span><br><span class="line">  临时对象.位置 = <span class="string">&#x27;前锋&#x27;</span></span><br><span class="line">  临时对象.弹跳 = <span class="number">60</span></span><br><span class="line">  临时对象.速度 = <span class="number">90</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> 临时对象 <span class="comment">// 3、我帮你return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、统一叫做prototype</span></span><br><span class="line">球员.原型 = &#123;  </span><br><span class="line">	奔跑:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*狂奔的代码*/</span>  &#125;,</span><br><span class="line">	传球:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*传球的代码*/</span>  &#125;,</span><br><span class="line">	突破:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*突破的代码*/</span>  &#125;,</span><br><span class="line">	铲球:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*铲球的代码*/</span>  &#125;,</span><br><span class="line">	射门:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*射门的代码*/</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只要你在球员前面使用 new 关键字，那么可以少做四件事情：<br>1、不用创建临时对象，因为 new 会帮你做（你使用「this」就可以访问到临时对象）；<br>2、不用绑定原型，因为 new 会帮你做（new 为了知道原型在哪，所以指定原型的名字为 prototype）；<br>3、不用 return 临时对象，因为 new 会帮你做；<br>4、不要给原型想名字了，因为 new 指定名字为 prototype。</p>
<p>这一次我们用 new 来写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 球员(<span class="variable constant_">ID</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.生命值 = <span class="number">42</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">ID</span> = <span class="variable constant_">ID</span></span><br><span class="line">  <span class="variable language_">this</span>.生命值 = <span class="number">42</span></span><br><span class="line">  <span class="variable language_">this</span>.位置 = <span class="string">&quot;前锋&quot;</span></span><br><span class="line">  <span class="variable language_">this</span>.弹跳 = <span class="number">60</span></span><br><span class="line">  <span class="variable language_">this</span>.速度 = <span class="number">82</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">球员.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">	奔跑:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*狂奔的代码*/</span>  &#125;,</span><br><span class="line">	传球:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*传球的代码*/</span>  &#125;,</span><br><span class="line">	突破:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*突破的代码*/</span>  &#125;,</span><br><span class="line">	铲球:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*铲球的代码*/</span>  &#125;,</span><br><span class="line">	射门:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*射门的代码*/</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后是创建球员（加了一个 new 关键字）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 球员们 = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</span><br><span class="line">  球员们.<span class="title function_">push</span>(<span class="keyword">new</span> 球员(i))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">俱乐部.批量制造(球员们)</span><br></pre></td></tr></table></figure>
<p>new 的作用，就是省那么几行代码。（也就是所谓的语法糖）</p>
<p>注意 constructor 属性<br>new 操作为了记录「临时对象是由哪个函数创建的」，所以预先给「球员.prototype」加了一个 constructor 属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">球员.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">constructor</span>: 球员</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你重新对「球员.prototype」赋值，那么这个 constructor 属性就没了，所以你应该这么写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">球员.<span class="property"><span class="keyword">prototype</span></span>.奔跑 = <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*狂奔的代码*/</span>  &#125;</span><br><span class="line">球员.<span class="property"><span class="keyword">prototype</span></span>.传球 = <span class="keyword">function</span>(<span class="params"></span>)&#123;  <span class="comment">/*传球的代码*/</span> &#125;</span><br><span class="line">球员.<span class="property"><span class="keyword">prototype</span></span>.突破 = <span class="keyword">function</span>(<span class="params"></span>)&#123;  <span class="comment">/*突破的代码*/</span>  &#125;</span><br><span class="line">球员.<span class="property"><span class="keyword">prototype</span></span>.铲球 = <span class="keyword">function</span>(<span class="params"></span>)&#123;  <span class="comment">/*铲球的代码*/</span>  &#125;</span><br><span class="line">球员.<span class="property"><span class="keyword">prototype</span></span>.射门 = <span class="keyword">function</span>(<span class="params"></span>)&#123;  <span class="comment">/*射门的代码*/</span>  &#125;</span><br></pre></td></tr></table></figure>
<p>或者你也可以自己给 constructor 重新赋值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">球员.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">constructor</span>: 球员,</span><br><span class="line">  奔跑:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*狂奔的代码*/</span>  &#125;,</span><br><span class="line">  传球:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*传球的代码*/</span> &#125;,</span><br><span class="line">  突破:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*突破的代码*/</span>  &#125;,</span><br><span class="line">  铲球:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*铲球的代码*/</span>  &#125;,</span><br><span class="line">  射门:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*射门的代码*/</span>  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>Front-end</category>
      </categories>
      <tags>
        <tag>front-end</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>在Vite2+Vue3渲染Markdown文档(亲测有效）</title>
    <url>/2024/03/14/Font-end/2024/%E5%9C%A8Vite2+Vue3%E6%B8%B2%E6%9F%93Markdown%E6%96%87%E6%A1%A3(%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/</url>
    <content><![CDATA[<h2 id="方法1：自定义-Vite-插件"><a href="#方法1：自定义-Vite-插件" class="headerlink" title="方法1：自定义 Vite 插件"></a>方法1：自定义 Vite 插件</h2><p>原版本升级到Vite2之后会报错<code>plugin.configureServer is not a function</code> ，此插件为修改后版本，亲测有效</p>
<h3 id="1、在项目根目录创建-md-ts-文件，填充如下内容："><a href="#1、在项目根目录创建-md-ts-文件，填充如下内容：" class="headerlink" title="1、在项目根目录创建 md.ts 文件，填充如下内容："></a>1、在项目根目录创建 md.ts 文件，填充如下内容：</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> marked <span class="keyword">from</span> <span class="string">&#x27;marked&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mdToJs</span> = str =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> content = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="title function_">marked</span>(str))</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`export default <span class="subst">$&#123;content&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">md</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;md&#x27;</span>, </span><br><span class="line">    <span class="title function_">configureServer</span>(<span class="params"></span>)&#123; <span class="comment">// 用于开发</span></span><br><span class="line">      <span class="keyword">async</span> (&#123; app &#125;) =&gt; &#123;</span><br><span class="line">        app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123; <span class="comment">// koa</span></span><br><span class="line">          <span class="keyword">if</span> (ctx.<span class="property">path</span>.<span class="title function_">endsWith</span>(<span class="string">&#x27;.md&#x27;</span>)) &#123;</span><br><span class="line">            ctx.<span class="property">type</span> = <span class="string">&#x27;js&#x27;</span></span><br><span class="line">            <span class="keyword">const</span> filePath = path.<span class="title function_">join</span>(process.<span class="title function_">cwd</span>(), ctx.<span class="property">path</span>)</span><br><span class="line">            ctx.<span class="property">body</span> = <span class="title function_">mdToJs</span>(fs.<span class="title function_">readFileSync</span>(filePath).<span class="title function_">toString</span>())</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">transform</span>(<span class="params">code, id</span>)&#123; <span class="comment">// 用于 rollup // 插件</span></span><br><span class="line">      <span class="comment">// 获取文件后缀名</span></span><br><span class="line">      <span class="keyword">const</span> fileArr = id.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>) <span class="comment">//根据.分割数组</span></span><br><span class="line">      <span class="keyword">const</span> fileType = fileArr[fileArr.<span class="property">length</span> -<span class="number">1</span>]; <span class="comment">//取最后一个</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(<span class="regexp">/\md$/</span>.<span class="title function_">test</span>(fileType))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="title function_">mdToJs</span>(code)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、接着修改-vite-config-ts，引入上面创建的插件"><a href="#2、接着修改-vite-config-ts，引入上面创建的插件" class="headerlink" title="2、接着修改 vite.config.ts，引入上面创建的插件"></a>2、接着修改 vite.config.ts，引入上面创建的插件</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;md&#125; <span class="keyword">from</span> <span class="string">&#x27;./md&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">md</span>()]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="3、在使用时，会将导入的-md-文件转换成-js-文件渲染。具体使用示例："><a href="#3、在使用时，会将导入的-md-文件转换成-js-文件渲染。具体使用示例：" class="headerlink" title="3、在使用时，会将导入的 md 文件转换成 js 文件渲染。具体使用示例："></a>3、在使用时，会将导入的 md 文件转换成 js 文件渲染。具体使用示例：</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">article</span> <span class="attr">v-html</span>=<span class="string">&quot;md&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> md <span class="keyword">from</span> <span class="string">&#x27;./xxx.md&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">return</span> &#123;md&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="方法2：使用-vite-plugin-markdown"><a href="#方法2：使用-vite-plugin-markdown" class="headerlink" title="方法2：使用 vite-plugin-markdown"></a>方法2：使用 vite-plugin-markdown</h2><p>这款第三方插件不仅支持引入并渲染 Markdown 文件，并且支持渲染成各种格式，例入 HTML 字符串、React 或 Vue 的组件等。</p>
<h3 id="1、安装-vite-plugin-markdown"><a href="#1、安装-vite-plugin-markdown" class="headerlink" title="1、安装 vite-plugin-markdown"></a>1、安装 vite-plugin-markdown</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i vite-plugin-markdown</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add vite-plugin-markdown</span><br></pre></td></tr></table></figure>

<h3 id="2、在-vite-config-ts-中修改："><a href="#2、在-vite-config-ts-中修改：" class="headerlink" title="2、在 vite.config.ts 中修改："></a>2、在 vite.config.ts 中修改：</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mdPlugin = <span class="built_in">require</span>(<span class="string">&#x27;vite-plugin-markdown&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    mdPlugin.<span class="title function_">plugin</span>(&#123;</span><br><span class="line">      <span class="attr">mode</span>: [<span class="string">&#x27;html&#x27;</span>],</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、配置中传入一个-options，选项对象，支持以下参数："><a href="#3、配置中传入一个-options，选项对象，支持以下参数：" class="headerlink" title="3、配置中传入一个 options，选项对象，支持以下参数："></a>3、配置中传入一个 options，选项对象，支持以下参数：</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">mode?: (<span class="string">&#x27;html&#x27;</span> | <span class="string">&#x27;toc&#x27;</span> | <span class="string">&#x27;react&#x27;</span> | <span class="string">&#x27;vue&#x27;</span>)[]</span><br><span class="line">markdown?: <span class="function">(<span class="params">body: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span></span><br><span class="line">markdownIt?: <span class="title class_">MarkdownIt</span> | <span class="title class_">MarkdownIt</span>.<span class="property">Options</span></span><br></pre></td></tr></table></figure>

<h3 id="4、各个模式下的渲染示例："><a href="#4、各个模式下的渲染示例：" class="headerlink" title="4、各个模式下的渲染示例："></a>4、各个模式下的渲染示例：</h3><h4 id="4-1-Import-Front-Matter-attributes"><a href="#4-1-Import-Front-Matter-attributes" class="headerlink" title="4.1 Import Front Matter attributes"></a>4.1 Import Front Matter attributes</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="attr">title</span>: <span class="title class_">Awesome</span> <span class="title class_">Title</span></span><br><span class="line"><span class="attr">description</span>: <span class="title class_">Describe</span> <span class="variable language_">this</span> awesome content</span><br><span class="line"><span class="attr">tags</span>:</span><br><span class="line">  - <span class="string">&quot;great&quot;</span></span><br><span class="line">  - <span class="string">&quot;awesome&quot;</span></span><br><span class="line">  - <span class="string">&quot;rad&quot;</span></span><br><span class="line">---</span><br><span class="line"># <span class="title class_">This</span> is awesome</span><br><span class="line"><span class="title class_">Vite</span> is an opinionated web dev build tool that serves your code via native <span class="variable constant_">ES</span> <span class="title class_">Module</span> imports during dev and bundles it <span class="keyword">with</span> <span class="title class_">Rollup</span> <span class="keyword">for</span> production.</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; attributes &#125; <span class="keyword">from</span> <span class="string">&#x27;./contents/the-doc.md&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(attributes) <span class="comment">//=&gt; &#123; title: &#x27;Awesome Title&#x27;, description: &#x27;Describe this awesome content&#x27;, tags: [&#x27;great&#x27;, &#x27;awesome&#x27;, &#x27;rad&#x27;] &#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-Import-compiled-HTML-Mode-HTML"><a href="#4-2-Import-compiled-HTML-Mode-HTML" class="headerlink" title="4.2 Import compiled HTML (Mode.HTML)"></a>4.2 Import compiled HTML (Mode.HTML)</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; html &#125; <span class="keyword">from</span> <span class="string">&#x27;./contents/the-doc.md&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(html) </span><br><span class="line"><span class="comment">//=&gt; &quot;This is awesomeite is an opinionated web dev build tool that serves your code via native ES Module imports during dev and bundles it with Rollup for production.&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-3-Import-ToC-metadata-Mode-TOC"><a href="#4-3-Import-ToC-metadata-Mode-TOC" class="headerlink" title="4.3 Import ToC metadata (Mode.TOC)"></a>4.3 Import ToC metadata (Mode.TOC)</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># vite</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vite</span> is an opinionated web dev build tool that serves your code via native <span class="variable constant_">ES</span> <span class="title class_">Module</span> imports during dev and bundles it <span class="keyword">with</span> <span class="title class_">Rollup</span> <span class="keyword">for</span> production.</span><br><span class="line"></span><br><span class="line">## <span class="title class_">Status</span></span><br><span class="line"></span><br><span class="line">## <span class="title class_">Getting</span> <span class="title class_">Started</span></span><br><span class="line"></span><br><span class="line"># <span class="title class_">Notes</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; toc &#125; <span class="keyword">from</span> <span class="string">&#x27;./contents/the-doc.md&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(toc)</span><br><span class="line"><span class="comment">//=&gt; [&#123; level: &#x27;1&#x27;, content: &#x27;vite&#x27; &#125;, &#123; level: &#x27;2&#x27;, content: &#x27;Status&#x27; &#125;, &#123; level: &#x27;2&#x27;, content: &#x27;Getting Started&#x27; &#125;, &#123; level: &#x27;1&#x27;, content: &#x27;Notes&#x27; &#125;,]</span></span><br></pre></td></tr></table></figure>

<h4 id="4-4-Import-as-a-React-component-Mode-REACT"><a href="#4-4-Import-as-a-React-component-Mode-REACT" class="headerlink" title="4.4 Import as a React component (Mode.REACT)"></a>4.4 Import as a React component (Mode.REACT)</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./contents/the-doc.md&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyReactApp</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">ReactComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-5-Import-as-a-Vue-component-Mode-VUE"><a href="#4-5-Import-as-a-Vue-component-Mode-VUE" class="headerlink" title="4.5 Import as a Vue component (Mode.VUE)"></a>4.5 Import as a Vue component (Mode.VUE)</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">markdown-content</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; <span class="title class_">VueComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./contents/the-doc.md&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">MarkdownContent</span>: <span class="title class_">VueComponent</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>Front-end</category>
      </categories>
      <tags>
        <tag>front-end</tag>
        <tag>vite</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>两种盒模型（box-sizing）的区别？</title>
    <url>/2024/03/17/Font-end/2024/%E4%B8%A4%E7%A7%8D%E7%9B%92%E6%A8%A1%E5%9E%8B%EF%BC%88box-sizing%EF%BC%89%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F/</url>
    <content><![CDATA[<h2 id="第一种盒模型是-content-box，即-width-指定的是-content-区域宽度，而不是实际宽度，公式为"><a href="#第一种盒模型是-content-box，即-width-指定的是-content-区域宽度，而不是实际宽度，公式为" class="headerlink" title="第一种盒模型是 content-box，即 width 指定的是 content 区域宽度，而不是实际宽度，公式为"></a>第一种盒模型是 content-box，即 width 指定的是 content 区域宽度，而不是实际宽度，公式为</h2><p><code>实际宽度 = width + padding + border </code></p>
<h2 id="第二种盒模型是-border-box，即-width-指定的是左右边框外侧的距离，公式为"><a href="#第二种盒模型是-border-box，即-width-指定的是左右边框外侧的距离，公式为" class="headerlink" title="第二种盒模型是 border-box，即 width 指定的是左右边框外侧的距离，公式为"></a>第二种盒模型是 border-box，即 width 指定的是左右边框外侧的距离，公式为</h2><p><code>实际宽度 = width</code></p>
<p>相同点是都是用来指定宽度的，不同点是 border-box 更好用。 </p>
<hr>
]]></content>
      <categories>
        <category>Front-end</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>front-end</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用Hexo搭建博客</title>
    <url>/2017/10/08/hexo/2017/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1>一、初始化你的Hexo博客</h1>

<p>Hexo 是一个基于 Node.js 的快速、简单且强大的博客框架。以下是 Hexo 的初始化步骤：</p>
<h3 id="1、首先你需要在电脑上安装-Node-js-和-Git。这两者是-Hexo-运行的必要环境。"><a href="#1、首先你需要在电脑上安装-Node-js-和-Git。这两者是-Hexo-运行的必要环境。" class="headerlink" title="1、首先你需要在电脑上安装 Node.js 和 Git。这两者是 Hexo 运行的必要环境。"></a>1、首先你需要在电脑上安装 Node.js 和 Git。这两者是 Hexo 运行的必要环境。</h3><h3 id="2、安装-Hexo。打开终端，输入以下命令："><a href="#2、安装-Hexo。打开终端，输入以下命令：" class="headerlink" title="2、安装 Hexo。打开终端，输入以下命令："></a>2、安装 Hexo。打开终端，输入以下命令：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p> 这将全局安装 Hexo。</p>
<h3 id="3、创建一个新的-Hexo-项目。替换-为你想要的文件夹名，再输入："><a href="#3、创建一个新的-Hexo-项目。替换-为你想要的文件夹名，再输入：" class="headerlink" title="3、创建一个新的 Hexo 项目。替换 &lt;folder&gt; 为你想要的文件夹名，再输入："></a>3、创建一个新的 Hexo 项目。替换 <code>&lt;folder&gt;</code> 为你想要的文件夹名，再输入：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br></pre></td></tr></table></figure>
<p>这将在指定的文件夹中创建一个新的 Hexo 项目，并且进入到这个文件夹内。</p>
<h3 id="4、安装项目依赖。在终端，输入："><a href="#4、安装项目依赖。在终端，输入：" class="headerlink" title="4、安装项目依赖。在终端，输入："></a>4、安装项目依赖。在终端，输入：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>这将安装所有 Hexo 项目所需要的依赖。</p>
<p>5、现在，你可以运行 Hexo 服务器来预览你的博客。输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>这将启动 Hexo 服务器。你可以在浏览器中输入 <code>localhost:4000</code> 来查看你的博客。</p>
<p><b>以上步骤便是 Hexo 的基础配置和初始化。</b></p>
<h2 id="6、创建博客（文章）"><a href="#6、创建博客（文章）" class="headerlink" title="6、创建博客（文章）"></a>6、创建博客（文章）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>
<p>如 <code>hexo new 开博大吉</code>（开博大吉为文章标题），返回一个 md 文件的路径</p>
<h3 id="7、编辑-md-文件"><a href="#7、编辑-md-文件" class="headerlink" title="7、编辑 md 文件"></a>7、编辑 md 文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">start xxxxxxxxxxxxxxxxxxx.md</span><br></pre></td></tr></table></figure>
<p>内容在第二个<code>---</code>之后编写， （注意：Ubuntu 系统用 xdg-open xxxxxxxxxxxxxxxxxxx.md 命令），或在 <code>source/_posts</code> 文件夹中找到它，并且开始进行编辑。</p>
<h3 id="8、更新"><a href="#8、更新" class="headerlink" title="8、更新"></a>8、更新</h3><p>使用 <code>hexo generate</code> 或简写的 <code>hexo g</code> 来生成静态文件，再次运行 <code>hexo server</code> 就可以看到你的新文章了。</p>
<h1>二、部署到github</h1>
要将 Hexo 博客部署到 GitHub，你需要遵循以下步骤：

<h3 id="1、在-GitHub-上新建一个空-repo-repo-名称是「用户名-github-io」（仓库名一定要这个格式，不然博客跳转有问题）"><a href="#1、在-GitHub-上新建一个空-repo-repo-名称是「用户名-github-io」（仓库名一定要这个格式，不然博客跳转有问题）" class="headerlink" title="1、在 GitHub 上新建一个空 repo ,repo 名称是「用户名.github.io」（仓库名一定要这个格式，不然博客跳转有问题）"></a>1、在 GitHub 上新建一个空 repo ,repo 名称是<code>「用户名.github.io」</code>（仓库名一定要这个格式，不然博客跳转有问题）</h3><h3 id="2、在你的-Hexo-项目目录下，通过以下命令安装-git-部署插件-hexo-deployer-git："><a href="#2、在你的-Hexo-项目目录下，通过以下命令安装-git-部署插件-hexo-deployer-git：" class="headerlink" title="2、在你的 Hexo 项目目录下，通过以下命令安装 git 部署插件 hexo-deployer-git："></a>2、在你的 Hexo 项目目录下，通过以下命令安装 git 部署插件 <code>hexo-deployer-git</code>：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>这是一个 Hexo 插件，可以帮助你直接将项目部署到 GitHub。之后再修改博客需要上传，可执行：hexo generate代替该步</p>
<h3 id="3、编辑网站配置-start-config-yml（该文件在hexoblog根目录下）"><a href="#3、编辑网站配置-start-config-yml（该文件在hexoblog根目录下）" class="headerlink" title="3、编辑网站配置 start _config.yml（该文件在hexoblog根目录下）"></a>3、编辑网站配置 <code>start _config.yml</code>（该文件在hexoblog<b>根目录</b>下）</h3><p>找到 # Deployment 的部分。在这里，你需要配置如何将你的 Hexo 博客部署到 GitHub。参考以下例子进行设置：</p>
<p><b>可改项：</b></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">.</span> <span class="string">第</span> <span class="number">6</span> <span class="string">行的</span> <span class="string">title</span> <span class="string">文章标题</span></span><br><span class="line"><span class="number">2</span><span class="string">.</span> <span class="string">第</span> <span class="number">9</span> <span class="string">行的</span> <span class="string">author</span> <span class="string">作者名</span></span><br></pre></td></tr></table></figure>
<p><b>必改项：</b></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">.</span> <span class="string">type</span> <span class="string">改成</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">2. repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span>  </span><br><span class="line"><span class="number">3</span><span class="string">.</span> <span class="string">//</span> <span class="string">加上该行</span> <span class="attr">repo:</span> <span class="string">后面有个空格</span></span><br><span class="line"><span class="number">4</span><span class="string">.</span> <span class="string">//</span> <span class="string">与type垂直对齐</span></span><br><span class="line"><span class="number">5</span><span class="string">.</span> <span class="string">//</span> <span class="string">仓库地址为firstblog所对应的地址，仓库地址以</span> <span class="string">git@github.com:开头</span></span><br></pre></td></tr></table></figure>

<p>这里，<code>&lt;repository url&gt;</code> 是你的 GitHub 存储库的 URL，应该类似于 <code>https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git</code>。而 <code>&lt;branch&gt;</code> 则应设置为对应分支名或不写。</p>
<h3 id="4、输入以下命令来生成静态文件并部署到-GitHub："><a href="#4、输入以下命令来生成静态文件并部署到-GitHub：" class="headerlink" title="4、输入以下命令来生成静态文件并部署到 GitHub："></a>4、输入以下命令来生成静态文件并部署到 GitHub：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy  // 上传博客系统（包括文章）</span><br></pre></td></tr></table></figure>
<p>也可以使用简写 <code>hexo d -g</code><br>现在，你应该可以通过访问 <code>https://&lt;username&gt;.github.io</code> 来查看你的 Hexo 博客网站了。<br>注意：部署到 GitHub Pages 时，你的仓库名称应遵循 <code>&lt;username&gt;.github.io</code> 的格式，<code>&lt;username&gt;</code> 要与你的 GitHub 账号名一致</p>
<h3 id="5、进入-username-github-io-对应的-repo，打开-GitHub-Pages-功能（setting中），就可以直接点击预览链接"><a href="#5、进入-username-github-io-对应的-repo，打开-GitHub-Pages-功能（setting中），就可以直接点击预览链接" class="headerlink" title="5、进入 username.github.io  对应的 repo，打开 GitHub Pages 功能（setting中），就可以直接点击预览链接"></a>5、进入 <code>username.github.io</code>  对应的 repo，打开 GitHub Pages 功能（setting中），就可以直接点击预览链接</h3><hr>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>如何更换Hexo主题</title>
    <url>/2017/10/19/hexo/2017/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%8D%A2Hexo%E4%B8%BB%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1、下载主题"><a href="#1、下载主题" class="headerlink" title="1、下载主题"></a>1、下载主题</h2><p>&emsp;&emsp;首先，你需要选择一个你喜欢的主题并下载。在 Hexo 的官方网站（hexo.io&#x2F;themes）上可以找到许多主题。每个主题的描述旁边通常都会有一个链接，点击这个链接就可以下载这个主题。</p>
<p>&emsp;&emsp;如果链接跳转到了 Github 仓库，你可以直接点击页面右上方的 “Clone or download” 按钮，然后选择 “Download ZIP”。这样就可以下载下来该主题的压缩包。</p>
<p>&emsp;&emsp;还有一种方式是使用 git 命令行工具克隆主题的仓库。首先你需要安装 git 工具，然后在命令行中输入类似于下面的命令：</p>
<pre><code class="bash">git clone https://github.com/theme-author/theme-name.git themes/theme-name
</code></pre>
<h2 id="2、安装主题"><a href="#2、安装主题" class="headerlink" title="2、安装主题"></a>2、安装主题</h2><p>&emsp;&emsp;下载主题后，将主题的整个文件夹复制或移动到你的 Hexo 博客的 <code>themes/</code> 文件夹中。</p>
<h2 id="3、启用主题"><a href="#3、启用主题" class="headerlink" title="3、启用主题"></a>3、启用主题</h2><p>&emsp;&emsp;打开 Hexo 博客的<b>根目录</b>下的 <code>_config.yml</code> 文件，并找到 theme 配置项。将这个配置项的值修改为你刚刚安装的主题的名字。比如，如果你安装的是 Next 主题，就将 <code>theme</code> 配置项的值修改为 <code>next</code>。</p>
<h2 id="4、配置主题"><a href="#4、配置主题" class="headerlink" title="4、配置主题"></a>4、配置主题</h2><p>&emsp;&emsp;大部分主题都可以进行自定义配置。通常在主题的文件夹下会有一个 _config.yml 文件，这个文件用于定义主题的配置。每个主题的配置项都不尽相同，具体可以参考主题的文档说明。</p>
<p>&emsp;&emsp;一旦你完成了上面的步骤，你的 Hexo 博客就会使用新的主题了。为了看到改变，你可能需要运行 <code>hexo clean</code> 和 <code>hexo server</code>，然后在浏览器中刷新你的博客网页。如果你在切换主题后遇到问题，记得查看新主题的文档，或者与主题的作者联系。</p>
<hr>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>开博大吉</title>
    <url>/2017/10/08/hexo/2017/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<hr>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo主题Next相关配置</title>
    <url>/2018/08/22/hexo/2018/Next%E4%B8%BB%E9%A2%98%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="一、更改主题颜色方案"><a href="#一、更改主题颜色方案" class="headerlink" title="一、更改主题颜色方案"></a>一、更改主题颜色方案</h1><h2 id="1、打开主题下的配置文件-config-yml"><a href="#1、打开主题下的配置文件-config-yml" class="headerlink" title="1、打开主题下的配置文件_config.yml"></a>1、打开主题下的配置文件_config.yml</h2><p>路径 <code>\themes\hexo-theme-next-master\_config.yml</code>,打开这个文件并找到Schemes这段代码</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure>

<h2 id="2、打开想要选择的颜色方案"><a href="#2、打开想要选择的颜色方案" class="headerlink" title="2、打开想要选择的颜色方案"></a>2、打开想要选择的颜色方案</h2><p>可以看到一共四个主题，这里选择的是Gemini颜色方案，把这一行前面的”#”去掉即可，重新运行后就会显示Gemini的颜色方案</p>
<h1 id="二、在导航栏中添加主页"><a href="#二、在导航栏中添加主页" class="headerlink" title="二、在导航栏中添加主页"></a>二、在导航栏中添加主页</h1><p>安装主题后，发现导航栏没有主页</p>
<h2 id="1、在当前主题下的配置文件-config-yml中找到menu这段代码，把home这一行的“-”去掉即可"><a href="#1、在当前主题下的配置文件-config-yml中找到menu这段代码，把home这一行的“-”去掉即可" class="headerlink" title="1、在当前主题下的配置文件_config.yml中找到menu这段代码，把home这一行的“#”去掉即可"></a>1、在当前主题下的配置文件_config.yml中找到menu这段代码，把home这一行的“#”去掉即可</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br></pre></td></tr></table></figure>
<p>重新运行后导航栏会显示主页</p>
<h1 id="三、配置分类"><a href="#三、配置分类" class="headerlink" title="三、配置分类"></a>三、配置分类</h1><h2 id="1、在当前主题下的配置文件-config-yml中找到menu这段代码-，把categories这一行的“-”去掉"><a href="#1、在当前主题下的配置文件-config-yml中找到menu这段代码-，把categories这一行的“-”去掉" class="headerlink" title="1、在当前主题下的配置文件_config.yml中找到menu这段代码 ，把categories这一行的“#”去掉"></a>1、在当前主题下的配置文件_config.yml中找到menu这段代码 ，把categories这一行的“#”去掉</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br></pre></td></tr></table></figure>

<h2 id="2、创建分类目录文件"><a href="#2、创建分类目录文件" class="headerlink" title="2、创建分类目录文件"></a>2、创建分类目录文件</h2><p>因为分类页是没有默认页面的所以需要我们手动创建分类页。</p>
<p>打开命令行，进入博客项目所在的文件夹下，执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>
<p>成功后会提示：</p>
<p><code>INFO  Created: ~/blog/source/categories/index.md</code></p>
<p>这样我们就创建好了分类页面了。</p>
<p>但是这时主题还能将页面识别为分类页；所以我们需要编辑这个新建的页面，让主题识别页面，并自动为这个页面显示分类。</p>
<h2 id="3、编辑页面让主题识别页面为分类页面"><a href="#3、编辑页面让主题识别页面为分类页面" class="headerlink" title="3、编辑页面让主题识别页面为分类页面"></a>3、编辑页面让主题识别页面为分类页面</h2><p>根据成功后提示路径打开<code>index.md</code>这个页面文件，打开后默认内容是</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line"><span class="section">date: 2018-03-25 12:35:35</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>添加上<code>type: &quot;categories&quot;</code>这段代码</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2018-03-25 12:35:35</span><br><span class="line"><span class="section">type: &quot;categories&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
<p>这样就完成了分类页面的配置了</p>
<h2 id="4-给文章设置分类属性"><a href="#4-给文章设置分类属性" class="headerlink" title="4. 给文章设置分类属性"></a>4. 给文章设置分类属性</h2><p>打开需要添加分类的文章，在文章Front-matter区域，也就是顶部两个<code>---</code>中，添加categories设置分类</p>
<p>注：“-”后面有个空格</p>
<h3 id="4-1-设置一级分类"><a href="#4-1-设置一级分类" class="headerlink" title="4.1 设置一级分类"></a>4.1 设置一级分类</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 如何更换Hexo主题</span><br><span class="line">date: 2017-10-19 22:26:23</span><br><span class="line">categories: </span><br><span class="line"><span class="section">- Hexo</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
<p>如<code>categories:Hexo</code>表示添加该文章到 “Hexo” 这个分类下。</p>
<p>然后我们就可以在博客到分类里看到该分类了。</p>
<h3 id="4-2-设置二级分类"><a href="#4-2-设置二级分类" class="headerlink" title="4.2 设置二级分类"></a>4.2 设置二级分类</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 如何更换Hexo主题</span><br><span class="line">date: 2017-10-19 22:26:23</span><br><span class="line">categories: </span><br><span class="line"><span class="bullet">-</span> Blog</span><br><span class="line"><span class="section">- Hexo</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
<p>如上设置二级分类，表示该篇文章为 Blog 分类下的 Hexo 分类下。</p>
<h3 id="4-3-并列-子分类"><a href="#4-3-并列-子分类" class="headerlink" title="4.3 并列+子分类"></a>4.3 并列+子分类</h3><p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 如何更换Hexo主题</span><br><span class="line">date: 2017-10-19 22:26:23</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> [Diary, PlayStation]</span><br><span class="line"><span class="bullet">-</span> [Diary, Games]</span><br><span class="line"><span class="section">- [Life]</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<h1 id="四、配置标签"><a href="#四、配置标签" class="headerlink" title="四、配置标签"></a>四、配置标签</h1><h2 id="1、-在当前主题下的配置文件-config-yml中找到menu这段代码，把tags这一行的“-”去掉即可"><a href="#1、-在当前主题下的配置文件-config-yml中找到menu这段代码，把tags这一行的“-”去掉即可" class="headerlink" title="1、 在当前主题下的配置文件_config.yml中找到menu这段代码，把tags这一行的“#”去掉即可"></a>1、 在当前主题下的配置文件_config.yml中找到menu这段代码，把tags这一行的“#”去掉即可</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br></pre></td></tr></table></figure>

<h2 id="2、创建标签目录文件"><a href="#2、创建标签目录文件" class="headerlink" title="2、创建标签目录文件"></a>2、创建标签目录文件</h2><p>和分类页一样，标签页也是没有默认页面的所以需要我们手动创建标签页。</p>
<p>打开命令行，进入博客项目所在的文件夹下，执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>
<p>成功后会提示：</p>
<p><code>INFO  Created: ~/blog/source/tags/index.md</code></p>
<p>这样我们就创建好了标签页面了。但是这个时候主题还不会识别这个页面为标签页；所以我们需要编辑这个新建的页面，让主题识别这个页面，并自动为这个页面显示标签。</p>
<h2 id="3、-编辑页面让主题识别页面为标签页面"><a href="#3、-编辑页面让主题识别页面为标签页面" class="headerlink" title="3、 编辑页面让主题识别页面为标签页面"></a>3、 编辑页面让主题识别页面为标签页面</h2><p>上文说到需要编辑页面才能让主题识别这个页面为标签页面，我们只需要根据成功后到提示路径打开<code>index.md</code>这个页面文件，打开后默认内容是</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2021-01-25 22:54:58</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>添加上<code>type: &quot;tags&quot;</code>这段代码，这样就能让主题识别该页面为标签页面了</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2021-01-25 22:54:58</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h2 id="4、-给文章设置标签属性"><a href="#4、-给文章设置标签属性" class="headerlink" title="4、 给文章设置标签属性"></a>4、 给文章设置标签属性</h2><p>打开需要添加标签的文章，在Front-matter区域，顶部两个<code>---</code>中，添加tags设置标签</p>
<p>注：“-”后面有个空格</p>
<h3 id="4-1-设置单标签"><a href="#4-1-设置单标签" class="headerlink" title="4.1 设置单标签"></a>4.1 设置单标签</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 开博大吉</span><br><span class="line">date: 2017-10-08 17:48:54</span><br><span class="line">tags:</span><br><span class="line"><span class="section">- Hexo</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-设置多标签-并同时设置分类"><a href="#4-2-设置多标签-并同时设置分类" class="headerlink" title="4.2 设置多标签 并同时设置分类"></a>4.2 设置多标签 并同时设置分类</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 开博大吉</span><br><span class="line">date: 2017-10-08 17:48:54</span><br><span class="line">categories: </span><br><span class="line"><span class="bullet">-</span> Hexo</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">-</span> Hexo</span><br><span class="line"><span class="section">- Blog</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<h1 id="五、添加本地搜索功能"><a href="#五、添加本地搜索功能" class="headerlink" title="五、添加本地搜索功能"></a>五、添加本地搜索功能</h1><h2 id="1、在当前主题下的配置文件-config-yml-中开启搜索功能"><a href="#1、在当前主题下的配置文件-config-yml-中开启搜索功能" class="headerlink" title="1、在当前主题下的配置文件 _config.yml 中开启搜索功能"></a>1、在当前主题下的配置文件 _config.yml 中开启搜索功能</h2><p>找到local_search，enalbe属性改为true</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="2、安装-hexo-generator-searchdb-插件"><a href="#2、安装-hexo-generator-searchdb-插件" class="headerlink" title="2、安装 hexo-generator-searchdb 插件"></a>2、安装 <code>hexo-generator-searchdb</code> 插件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<h2 id="3、在当前主题下的配置文件-config-yml-中配置搜索功能"><a href="#3、在当前主题下的配置文件-config-yml-中配置搜索功能" class="headerlink" title="3、在当前主题下的配置文件 _config.yml 中配置搜索功能"></a>3、在当前主题下的配置文件 _config.yml 中配置搜索功能</h2><p>添加以下代码</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br></pre></td></tr></table></figure>

<h1 id="六、设置代码样式"><a href="#六、设置代码样式" class="headerlink" title="六、设置代码样式"></a>六、设置代码样式</h1><h2 id="4-1-在当前主题下的配置文件-config-yml-中搜索到以下代码"><a href="#4-1-在当前主题下的配置文件-config-yml-中搜索到以下代码" class="headerlink" title="4.1 在当前主题下的配置文件 _config.yml 中搜索到以下代码"></a>4.1 在当前主题下的配置文件 _config.yml 中搜索到以下代码</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># All available themes: https://theme-next.js.org/highlight/</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">stackoverflow-light</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">stackoverflow-light</span></span><br><span class="line">  <span class="attr">prism:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">prism</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">prism-dark</span></span><br></pre></td></tr></table></figure>

<h2 id="4-2-打开网址，选择自己喜欢的样式-根据网站上的代码设置"><a href="#4-2-打开网址，选择自己喜欢的样式-根据网站上的代码设置" class="headerlink" title="4.2 打开网址，选择自己喜欢的样式,根据网站上的代码设置"></a>4.2 打开<a href="https://theme-next.js.org/highlight/">网址</a>，选择自己喜欢的样式,根据网站上的代码设置</h2><p>如这里设置了stackoverflow-light样式，使用时在代码块旁边写明什么语言，如这里是yml就写”&#96;&#96;&#96;yml”</p>
<hr>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加评论系统gitalk</title>
    <url>/2024/03/15/hexo/2024/Hexo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9Fgitalk/</url>
    <content><![CDATA[<h1 id="一、申请GitHub应用"><a href="#一、申请GitHub应用" class="headerlink" title="一、申请GitHub应用"></a>一、申请GitHub应用</h1><h2 id="1-注册一个新应用-new-OAuth-application"><a href="#1-注册一个新应用-new-OAuth-application" class="headerlink" title="1. 注册一个新应用 new OAuth application"></a>1. 注册一个新应用 new OAuth application</h2><p><a href="https://github.com/settings/applications/new">注册new OAuth application网址</a>,这三项内容必须填写</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">Application</span> <span class="string">name：//</span> <span class="string">这个随意填写</span></span><br><span class="line"><span class="string">Homepage</span> <span class="string">URL：//</span> <span class="string">你的网站的URL地址，包含http部分。</span></span><br><span class="line"><span class="string">Authorization</span> <span class="string">callback</span> <span class="string">URL：//</span> <span class="string">你的网站的URL地址，包含http部分，和上面的</span> <span class="string">Homepage</span> <span class="string">URL</span> <span class="string">一致就行</span></span><br></pre></td></tr></table></figure>

<h2 id="1-1-Homepage-URL与Authorization-callback-URL的填写"><a href="#1-1-Homepage-URL与Authorization-callback-URL的填写" class="headerlink" title="1.1 Homepage URL与Authorization callback URL的填写"></a>1.1 Homepage URL与Authorization callback URL的填写</h2><ul>
<li>如果你的网站是host在github上的，是通过github分配给你的网址进行访问的，直接填写github分配给你的网站就可以，类似 username.github.io</li>
<li>如果你有自己的域名，但网站内容host是在github上的，是通过cname的方式访问的，那么这两项都填你的域名</li>
<li>如果你有自己的域名，也有自己的站点，那么这两项都填你的域名</li>
<li>在调试阶段，可以把这两项设置为你的本地地址，这样方便测试，而不用一次又一次的部署网站，等测试好之后再统一部署。</li>
</ul>
<h2 id="2-生成Client信息"><a href="#2-生成Client信息" class="headerlink" title="2. 生成Client信息"></a>2. 生成Client信息</h2><p>点击 “register application”完成注册，系统会生成Client ID和Client secrets(需要手动点一下旁边的按钮)</p>
<h1 id="二、配置Gitalk"><a href="#二、配置Gitalk" class="headerlink" title="二、配置Gitalk"></a>二、配置Gitalk</h1><h2 id="方法1：通过Next主题进行配置"><a href="#方法1：通过Next主题进行配置" class="headerlink" title="方法1：通过Next主题进行配置"></a>方法1：通过Next主题进行配置</h2><p>Next主题已经为我们配置了gitalk，只需配置即可</p>
<h3 id="打开当前主题下的配置文件-config-yml"><a href="#打开当前主题下的配置文件-config-yml" class="headerlink" title="打开当前主题下的配置文件_config.yml"></a>打开当前主题下的配置文件_config.yml</h3><p>路径 <code>\themes\hexo-theme-next-master\_config.yml</code>,打开这个文件并找到下面这段代码</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github_id:</span> <span class="string">你的Github登录账号</span>    <span class="string">//</span> <span class="string">这里可以不要加引号</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">gitalk</span> <span class="string">你的</span> <span class="string">Github仓库的名称</span>   <span class="string">//</span> <span class="string">不要写成仓库地址</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">上面刚刚申请的</span> <span class="string">Client</span> <span class="string">ID</span>  </span><br><span class="line">  <span class="attr">client_secret:</span> <span class="string">上面刚刚申请的</span> <span class="string">Client</span> <span class="string">Secret</span></span><br><span class="line">  <span class="attr">admin_user:</span> <span class="string">你的Github登录账号</span></span><br><span class="line">  <span class="attr">distraction_free_mode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">proxy:</span> <span class="string">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span></span><br><span class="line">  <span class="attr">language:</span></span><br></pre></td></tr></table></figure>

<h2 id="方法2：使用官网配置"><a href="#方法2：使用官网配置" class="headerlink" title="方法2：使用官网配置"></a>方法2：使用官网配置</h2><p>官网地址：<a href="https://github.com/gitalk/gitalk">https://github.com/gitalk/gitalk</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> gitalk = <span class="keyword">new</span> <span class="title class_">Gitalk</span>(&#123;</span><br><span class="line">  <span class="attr">clientID</span>: <span class="string">&#x27;GitHub Application Client ID&#x27;</span>,</span><br><span class="line">  <span class="attr">clientSecret</span>: <span class="string">&#x27;GitHub Application Client Secret&#x27;</span>,</span><br><span class="line">  <span class="attr">repo</span>: <span class="string">&#x27;GitHub repo&#x27;</span>,      <span class="comment">// The repository of store comments,</span></span><br><span class="line">  <span class="attr">owner</span>: <span class="string">&#x27;GitHub repo owner&#x27;</span>,</span><br><span class="line">  <span class="attr">admin</span>: [<span class="string">&#x27;GitHub repo owner and collaborators, only these guys can initialize github issues&#x27;</span>],</span><br><span class="line">  <span class="attr">id</span>: location.<span class="property">pathname</span>,      <span class="comment">// Ensure uniqueness and length less than 50</span></span><br><span class="line">  <span class="attr">distractionFreeMode</span>: <span class="literal">false</span>  <span class="comment">// Facebook-like distraction free mode</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gitalk.<span class="title function_">render</span>(<span class="string">&#x27;gitalk-container&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="三、参数说明"><a href="#三、参数说明" class="headerlink" title="三、参数说明"></a>三、参数说明</h1><p>注：官网配置的参数和Hexo主题Next的参数是通用的</p>
<ul>
<li><p>repo: 要求填写你的<b>Github仓库的名称</b>，这个仓库可以是你的github上的任意一个，但必须是公开的。评论内容会以 issue的形式保存到仓库的issues中，所以建议为评论单独新建一个仓库</p>
</li>
<li><p>admin: 指定了可以初始化文章评论的github用户，一般只填写你自己就可以了</p>
</li>
<li><p>id: 文章的URL路径，不包括域名，这个路径要求必须是唯一的，且不能超过50个字符(如果超过了，可以使用md5等工具对路径进行摘要缩短长度即可)。每一遍文章的评论和这个路径相关联，所以即使域名不同，只要文章的URL一样，就会显示相关联的评论。<br>在Next主题中是自动配置的Hexo主题Next的参数定义在layout&#x2F;_third-party&#x2F;comments&#x2F;gitalk.njk中</p>
</li>
<li><p>distractionFreeMode：是否是聚精会神模式，即评论框在写评论的时候，周围是否变成黑</p>
</li>
</ul>
<h1 id="四、遇到的问题"><a href="#四、遇到的问题" class="headerlink" title="四、遇到的问题"></a>四、遇到的问题</h1><ul>
<li><p>问题1：<code>Error: Not Found</code><br>解决方法：一般是仓库名称没有正确设置，请依据上面的参数说明部分进行设置</p>
</li>
<li><p>问题2：<code>Related Issues not found：</code> 未找到相关的issue进行评论<br>解决方法：出现这种情况是因为文章评论还未初始化，只需要点击下面的按钮，登录 GitHub 账户即可</p>
</li>
<li><p>问题3：评论区一直加载不上：配置中的proxy地址不正确或已经失效。<br>解决方法：官网默认地址是 <a href="https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</a>。 如果你使用的是Next主题，请确保也是这个地址</p>
</li>
<li><p>问题4：设置后报错<code>Error: Failed to execute &#39;btoa&#39; on &#39;Window&#39;: The string to be encoded contains characters outside of the Latin1 range.</code><br>解决方法：配置文件_config.yml中gitalk相关配置有问题</p>
</li>
<li><p>问题5：评论区点击使用Github登陆报错404<br>解决方法：配置文件_config.yml中gitalk相关配置有问题</p>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加评论系统livere</title>
    <url>/2024/03/18/hexo/2024/Hexo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9Flivere/Hexo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9Flivere/</url>
    <content><![CDATA[<h1 id="注册必力账号-网页"><a href="#注册必力账号-网页" class="headerlink" title="注册必力账号  网页"></a>注册必力账号  <a href="https://livere.com/">网页</a></h1><p>点右上角头像，再点登陆，跳转页面后，点来必力注册</p>
<p><img src="/images/02%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2.png" alt="登陆界面"></p>
<p>第一行填注册邮箱，第二行用户名，第三行密码</p>
<p><img src="/.com//02%E6%B3%A8%E5%86%8C%E7%95%8C%E9%9D%A2.png" alt="注册界面"></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>在注册成功后，跳转到安装界面，选择City版本进行安装。 点击现在安装。</p>
<p><img src="/.com//03%E5%AE%89%E8%A3%85.png" alt="安装"></p>
<p>输入自己的网址（带https:&#x2F;&#x2F;），网站名（随便填），和网站类型（选择个人网站）即可。</p>
<p><img src="/.com//04%E7%BD%91%E5%9D%80%E5%A1%AB%E5%86%99.png" alt="网址"></p>
<h1 id="获取data-uid"><a href="#获取data-uid" class="headerlink" title="获取data-uid"></a>获取data-uid</h1><p>申请成功后，进入到代码管理界面。找到以下内容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;lv-container&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;city&quot;</span> <span class="attr">data-uid</span>=<span class="string">&quot;xxxxxxx&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>复制<code>data-uid</code>里面的那一串字段，配置要用。</p>
<p><img src="/.com//05%E4%BB%A3%E7%A0%81.png" alt="uid"></p>
<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>打开你当前主题目录下的配置文件（路径：themes&#x2F;next&#x2F;_config.yml），搜索livere，找到如下内容，把之前data-uid里面的字段复制到livere-uid:后面（注意字段和冒号中间要有空格,#号去掉）。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># LiveRe comments system</span></span><br><span class="line"><span class="comment"># You can get your uid from https://livere.com/insight/myCode (General web site)</span></span><br><span class="line"><span class="attr">livere_uid:</span>  <span class="comment">#&lt;your_uid&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="开启livere评论系统"><a href="#开启livere评论系统" class="headerlink" title="开启livere评论系统"></a>开启livere评论系统</h1><p>在你当前主题目录下的配置文件中，搜索comments，找到如下内容，在active:后面打上livere。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Available values: tabs | buttons</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">tabs</span></span><br><span class="line">  <span class="comment"># Choose a comment system to be displayed by default.</span></span><br><span class="line">  <span class="comment"># Available values: changyan | disqus | disqusjs | gitalk | livere | valine</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">livere</span></span><br><span class="line">  <span class="comment"># Setting `true` means remembering the comment system selected by the visitor.</span></span><br><span class="line">  <span class="attr">storage:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Lazyload all comment systems.</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h1 id="最后效果"><a href="#最后效果" class="headerlink" title="最后效果"></a>最后效果</h1><p>运行代码，效果如图</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p><img src="/.com//06%E8%AF%84%E8%AE%BA%E5%8C%BA.png" alt="评论区"></p>
<hr>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
